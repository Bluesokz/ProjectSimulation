
class Tree{
  
  float startH=0F;
  
  Tree(float startHeight){
    startH = startHeight;
    
  }
  
  
  void iterar (float [] a,float [] b,int n, boolean first ) {
  //We take a as initial point of branch and b as final point. a and b are vectors. We iterate by generating new brances who's initial point is atached to line between a and b, with less longitude than a-b line, and who's direction is rotated from a-b line.
  
  if (n==0){
  //If we are at a final branch, we put some leaves or flowers in it 
     float [] h=new float [2];
     h[0]=b[0]-a[0];
     h[1]=b[1]-a[1];
     for (int e=0;e<round(random(10,40));e++){
       //This is for leaves
       stroke(58,95,11);
       strokeWeight(4);
       point(b[0]+random(0,0.1)*h[0],HEIGHT-b[1]-random(0,0.1)*h[1]);
     }/*
     for (int e=0;e<round(random(0,1));e++){
       //This for flowers
       stroke(255);
       strokeWeight(1);
       point(b[0]+random(0,0.05)*h[0],HEIGHT-b[1]-random(0,0.05)*h[1]);
     }   */
  }
  else {
    //If we are not at final breanch, we need to iterate.
    //First draw current branch
    stroke(n*10, 0, 0);
    if(!first){
      strokeWeight(1);
    }else{
        strokeWeight(3);
    }
    line(a[0],HEIGHT-a[1],b[0],HEIGHT-b[1]);
    //And them calculating new set of branchs
    float [] h=new float [2];
    h[0]=b[0]-a[0];
    h[1]=b[1]-a[1];
    float r=random(1.2,8);
    //They start on some point along the existing branch
    float [] c=new float [2];
    c[0]=b[0]-1/r*h[0];
    c[1]=b[1]-1/r*h[1];
    float w=random(0,1);
    //Now we add several new branches to that point, each one less long that this one.
    for(int f=0;f<round(random(1,6));f++)
    {
      //The branched are rotated randomly
       float t=random(-w*PI/5-PI/8,w*PI/5+PI/8);
       float s=random(0.5,0.75);
       float [] d=new float [2];
       d[0]=c[0]+s*(cos(t)*h[0]+sin(t)*h[1]);
       d[1]=c[1]+s*(-sin(t)*h[0]+cos(t)*h[1]);
       //Each branch generates new ones or is the final branch
       iterar(c,d,n-round(random(0.49,1)),false);
     }
    }
  }
}

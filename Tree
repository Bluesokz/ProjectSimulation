class Tree{
  
  float startH=0F;
  float xPos=0F;
  
  int numBranches = 0;
  int leafCount = 0;
  int subBranch = 0;
  
  int red = 0;
  int green = 0;
  int blue = 0;
  
  Tree(float startHeight, float x, int branch, int leaves, int sub){
    startH = startHeight;
    xPos = x;
    numBranches = branch;
    leafCount = leaves;
    subBranch = sub;
  }
  
  
  void iterar (float [] a,float [] b,int n, boolean first, int rgb[]) {
  red = rgb[0];
  green = rgb[1];
  blue = rgb[2];
  
  if (n==0){
     float [] h=new float [2];
     h[0]=b[0]-a[0];
     h[1]=b[1]-a[1];
     for (int e=0;e<leafCount;e++){
       //This is for leaves
       stroke(red+random(-25,25),green+random(-25,25),blue+random(-25,25));
       strokeWeight(4);
       point(b[0]+random(0,0.1)*h[0],HEIGHT-b[1]-random(0,0.1)*h[1]);
     }
  }
  else {
    stroke(n*10, 0, 0);
    if(!first){
      strokeWeight(1);
    }else{
        strokeWeight(3);
    }
    line(a[0],HEIGHT-a[1],b[0],HEIGHT-b[1]);
    //And them calculating new set of branchs
    float [] h=new float [2];
    h[0]=b[0]-a[0];
    h[1]=b[1]-a[1];
    float r=random(1.2,8);
    //They start on some point along the existing branch
    float [] c=new float [2];
    c[0]=b[0]-1/r*h[0];
    c[1]=b[1]-1/r*h[1];
    float w=random(0,1);
    //Now we add several new branches to that point, each one less long than this one.
    for(int f=0;f<numBranches;f++)
    {
      //The branched are rotated randomly
       float t=random(-w*PI/5-PI/8,w*PI/5+PI/8);
       float s=random(0.5,0.75);
       float [] d=new float [2];
       d[0]=c[0]+s*(cos(t)*h[0]+sin(t)*h[1]);
       d[1]=c[1]+s*(-sin(t)*h[0]+cos(t)*h[1]);
       //Each branch generates new ones or is the final branch
       iterar(c,d,n-1,false, rgb);
     }
    }
  }
}

ArrayList<Tree> trees = new ArrayList<Tree>();
ArrayList<Tree> oldTrees = new ArrayList<Tree>();
int WIDTH=1600;
int HEIGHT=500; 
float [] a=new float [2];
float [] b=new float [2];
int count=0;
int [] rgb = new int[3];

void setup() { 
  rgb[0]=58;
  rgb[1]=95;
  rgb[2]=11;
  for(int i=0; i<2; i++){
    Tree t = new Tree(random(HEIGHT/10,HEIGHT/3),random(0+WIDTH/10,WIDTH-WIDTH/10), round(random(1,7)),round(random(10,40)), round(random(3,5)));
    trees.add(t);
    oldTrees.add(t);
  }
  size(WIDTH,HEIGHT);
  background(200,220,255);
  stroke(0, 0, 0);
  strokeWeight(5);
  gen();
  
}

void draw(){ 
  
}

void keyPressed(){
  if(keyCode == ENTER){
   newGeneration();
   gen(); 
  }
}

void newGeneration(){
  int count = 0;
  for(int i = 0; i < oldTrees.size()-1; i++){
    oldTrees.remove(i); 
  }
  for(Tree t: trees){
    oldTrees.add(new Tree(t.startH,t.xPos,t.numBranches,t.leafCount,t.subBranch));
  }
  
  for(int i = 0; i < trees.size()-1; i++){
    trees.remove(i); 
  }
  for(Tree ot: oldTrees){
    trees.add(new Tree(ot.startH,ot.xPos+20,ot.numBranches,ot.leafCount,ot.subBranch));
  }
}

void gen(){
  background(200,220,255);
  stroke(0, 92, 9);
  
  fill(90, 52, 0);
  strokeWeight(6);  
  rect(-10,HEIGHT-HEIGHT/10,WIDTH+20,HEIGHT);
    for ( Tree t: trees ){
         float x= t.xPos;
         a[0]=x;
         a[1]=HEIGHT/10;
         b[0]=x+random(-5,5);
         b[1]=a[1]+t.startH;
         int n = t.subBranch;//round(random(3,7));   
         t.iterar(a,b,n,true,rgb); //To generate the rest of the tree we call this function wich is going to be called recursively
    }
}
